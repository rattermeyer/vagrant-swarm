---
# tasks file for custom-certificates
- name: create CA dir
  file:
    path: "{{item}}"
    state: directory
  with_items:
    - "{{ca_dir}}"
    - "{{ca_dir}}/private"
    - "{{ca_dir}}/certs"
    - "{{ca_dir}}/newcerts"
    - "{{cert_dir}}/public"
    - "{{cert_dir}}/private"

- name: "check if database.txt exists"
  stat: path="{{ca_dir}}/database.txt"
  register: ca_db_exists
- file:
    path: "{{item}}"
    state: touch
  with_items:
    - "{{ca_dir}}/database.txt"
    - "{{ca_dir}}/database.txt.attr"
  when: ca_db_exists.stat.exists == False

- name: create CA config
  template:
    src: "caconfig.conf.j2"
    dest: "{{ca_dir}}/caconfig.conf"
- name: Check for CA key
  stat: path={{ca_dir}}/private/ca-key.pem
  register: ca_key

- block:
  - name: Create Serial file
    lineinfile:
      line: "01\n"
      dest: "{{ca_dir}}/serial"
      create: True
      state: present
  - name: Create CA key
    shell: openssl genrsa -aes256 -out {{ca_dir}}/private/ca-key.pem -passout pass:test123 4096
  - name: Create CA root certificate
    shell: >
      openssl req -new -x509 -days 3650
      -config {{ca_dir}}/caconfig.conf -key {{ca_dir}}/private/ca-key.pem -outform PEM -out {{ca_dir}}/certs/ca-root.pem -sha512
      -passin pass:test123 -subj "/C=DE/ST=NRW/L=Dorsten/O=DevOps Architect/OU=Root CA/CN=rattermeyer.de/E=ca@rattermeyer.de"
  when: ca_key.stat.exists == False

- name: "include"
  include: ssl_cert.yml cert="{{item}}"
  with_items: "{{certs}}"
