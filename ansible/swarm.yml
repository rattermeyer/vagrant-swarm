---
- hosts: all
  tasks:
    - name: "show proxy_env"
      debug: msg="{{proxy_env}}"
    - block:
      - name: setting proxy environment
        lineinfile:
          dest: "/etc/environment"
          line: "{{item.key}}={{item.value}}"
          state: present
        with_dict: "{{proxy_env | default({})}}"
      when: proxy_env is defined
  tags: proxy
  vars_files:
    - customization.yml

- hosts: dockerhosts
  pre_tasks:
    - name: ensure directories exists
      file:
        path: "{{item}}"
        state: directory
      with_items:
        - "/opt/certs/ca/certs"
        - "/opt/certs/ssl_certs/"

    - name: copy docker daemon certs and keys
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      with_items:
        - { src: /opt/certs/ca/certs/ca-root.pem, dest: /opt/certs/ca/certs/ca-root.pem }
        - { src: /opt/certs/ssl_certs/public/docker-registry-cert.pem, dest: /opt/certs/ssl_certs/docker-registry-cert.pem }
        - { src: /opt/certs/ssl_certs/private/docker-registry.key, dest: /opt/certs/ssl_certs/docker-registry.key }
    - block:
      - name: ensure .docker directory exists
        file:
          path: "/home/{{item}}/.docker"
          owner: "{{item}}"
          state: directory
        with_items:
          - ["vagrant"]
      - name: copy cert, ca and key
        copy:
          src: "{{item[0].src}}"
          dest: "/home/{{item[1]}}/.docker/{{item[0].dest}}"
          owner: "{{item[1]}}"
        with_nested:
          -
            - { src: /opt/certs/ca/certs/ca-root.pem, dest: "ca.pem"}
            - { src: /opt/certs/ssl_certs/private/docker-client.key, dest: "key.pem"}
            - { src: /opt/certs/ssl_certs/public/docker-client-cert.pem, dest: "cert.pem"}
          - ["vagrant"]
  roles:
    - { role: docker-ubuntu-2, docker_group_members: ["vagrant"], kernel_update_and_reboot_permitted: true}
  tags:
    - docker
  environment: "{{proxy_env | default({})}}"
  vars_files:
    - customization.yml

- hosts: all
  gather_facts: false
  roles:
    - dnsmasq
  tags:
    - dnsmasq
  environment: "{{proxy_env | default({})}}"
  vars_files:
    - customization.yml

- hosts: dockerregistry
  gather_facts: false
  roles:
    - { role: docker-registry, tags: ['docker-registry']}
    - { role: docker-images, tags: ['docker-images']}
  tags:
    - dockerregistry
  environment: "{{proxy_env | default({})}}"
  vars_files:
    - customization.yml

#============ CONSUL ================================
- hosts: consulhosts
  roles:
    - docker-consul
  tags:
    - consul
  environment: "{{proxy_env | default({})}}"
  vars_files:
    - customization.yml

- hosts: controller
  tasks:
    - name: Create Read Token request body
      set_fact:
        body: "{{ lookup('file', 'acls/read.json') }}"
    - name: create open acl
      uri:
        url: "http://master1.swarm:8500/v1/acl/update?dc=dc1&token={{acl_master_token}}"
        method: PUT
        body: "{{ body }}"
        body_format: json
        headers:
          "Content-Type": "application/json"
    - name: Create Write Token request body
      set_fact:
        body: "{{ lookup('file', 'acls/write.json') }}"
    - name: create open acl
      uri:
        url: "http://master1.swarm:8500/v1/acl/update?dc=dc1&token={{acl_master_token}}"
        method: PUT
        body: "{{ body }}"
        body_format: json
        headers:
          "Content-Type": "application/json"
  tags:
    - acls
  vars_files:
    - customization.yml

#======================================================

- hosts: swarmhosts
  tasks:
    - docker_container:
        image: "gliderlabs/registrator:latest"
        name: registrator
        restart_policy: always
        recreate: true
        command: "{{registrator_options | default(omit) }}"
        volumes:
          - "/var/run/docker.sock:/tmp/docker.sock"
        network_mode: host
      tags:
        - registrator
  environment: "{{proxy_env | default({})}}"
  vars_files:
    - customization.yml


#- hosts: swarmhosts
#  gather_facts: false
#  roles:
#    - docker-ubuntu-2
#    - docker-swarm
#  tags:
#    - swarm

- hosts: master1
  tasks:
    - block:
      - name: recreate swarm
        uri:
          url: "http://master1.swarm:2375/swarm/leave?force=1"
          method: POST
          return_content: true
        when: recreate_swarm==true
      - set_fact:
          init_body: "{{ lookup( 'file', 'swarm_init.json' ) }}"
      - debug: msg="{{init_body }}"
      - name: create swarm
        uri:
          url: "http://master1.swarm:2375/swarm/init"
          method: POST
          HEADER_Content_Type: "application/json"
          body: "{{init_body }}"
          body_format: json
        register: swarm_init_result
        failed_when: swarm_init_result.status >= 500
      - name: query swarm
        uri:
          url: "http://master1.swarm:2375/swarm"
          method: GET
          return_content: true
        register: swarm_info
      - name: "ensure directory exists"
        local_action:
          module: file
          path: "{{secret_dir}}"
          state: directory
      - name: "saving swarm info"
        local_action:
          module: copy
          content: "{{swarm_info.content}}"
          dest: "{{secret_dir}}/swarm_info.json"
      - name: debug
        debug: msg="{{swarm_info.content}}"
      tags: swarm
  environment: "{{proxy_env | default({})}}"
  tags: swarm
  vars:
    secret_dir: "/data/swarm"
  vars_files:
    - customization.yml
- hosts: swarmmembers
  tasks:
    - block:
      - name: "swarmmembers leaves swarm"
        uri:
          url: "http://{{inventory_hostname}}.swarm:2375/swarm/leave?force=1"
          method: POST
          return_content: true
        when: recreate_swarm==true
        ignore_errors: true
      - name: "read secret"
        set_fact:
          swarm_info: "{{ lookup ( 'file', '{{secret_dir}}/swarm_info.json') }}"
      - name: "define join body"
        set_fact:
          join_body: "{{ lookup( 'file', 'swarm_join.json' ) }}"
      - debug: msg="{{join_body }}"
      - name: join swarm
        uri:
          url: "http://{{inventory_hostname}}.swarm:2375/swarm/join"
          method: POST
          return_content: true
          HEADER_Content_Type: "application/json"
          body: "{{ join_body }}"
          body_format: json
        register: swarm_join_result
        failed_when: swarm_join_result.status >= 500
      - name: debug
        debug: msg="{{swarm_join_result}}"
      tags:
        - swarm
        - swarm_join
  vars:
    secret_dir: "/data/swarm"
  vars_files:
    - customization.yml
  environment: "{{proxy_env | default({})}}"
#- hosts: vaults
#  roles:
#    - docker-vault
#  tags:
#    - vault
