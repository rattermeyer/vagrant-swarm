---
- hosts: all
  tasks:
    - name: setting proxy environment
      lineinfile:
        dest: "/etc/environment"
        line: "{{item.key}}={{item.value}}"
        state: present
      with_dict: "{{proxy_env}}"
  tags: proxy

- hosts: dockerhosts
  roles:
    - { role: docker-ubuntu-2, docker_group_members: ["vagrant"], kernel_update_and_reboot_permitted: true}
  tags:
    - docker
  environment: "{{proxy_env | default(omit)}}"

- hosts: all
  gather_facts: false
  roles:
    - dnsmasq
  tags:
    - dnsmasq
  environment: "{{proxy_env | default(omit)}}"

- hosts: dockerregistry
  gather_facts: false
  roles:
    - { role: docker-registry, tags: ['docker-registry']}
    - { role: docker-images, tags: ['docker-images']}
  tags:
    - dockerregistry
  environment: "{{proxy_env | default(omit)}}"

#============ CONSUL ================================
- hosts: consulhosts
  roles:
    - docker-consul
  tags:
    - consul
  environment: "{{proxy_env | default(omit)}}"

- hosts: controller
  tasks:
    - name: Create Read Token request body
      set_fact:
        body: "{{ lookup('file', 'acls/read.json') }}"
    - name: create open acl
      uri:
        url: "http://master1.swarm:8500/v1/acl/update?dc=dc1&token={{acl_master_token}}"
        method: PUT
        body: "{{ body }}"
        body_format: json
        headers:
          "Content-Type": "application/json"
    - name: Create Write Token request body
      set_fact:
        body: "{{ lookup('file', 'acls/write.json') }}"
    - name: create open acl
      uri:
        url: "http://master1.swarm:8500/v1/acl/update?dc=dc1&token={{acl_master_token}}"
        method: PUT
        body: "{{ body }}"
        body_format: json
        headers:
          "Content-Type": "application/json"
  tags:
    - acls

#======================================================

- hosts: swarmhosts
  tasks:
    - docker_container:
        image: "gliderlabs/registrator:latest"
        name: registrator
        restart_policy: always
        recreate: true
        command: "{{registrator_options | default(omit) }}"
        volumes:
          - "/var/run/docker.sock:/tmp/docker.sock"
        network_mode: host
      tags:
        - registrator
  environment: "{{proxy_env | default(omit)}}"


#- hosts: swarmhosts
#  gather_facts: false
#  roles:
#    - docker-ubuntu-2
#    - docker-swarm
#  tags:
#    - swarm

- hosts: master1
  tasks:
    - block:
      - name: recreate swarm
        uri:
          url: "http://master1.swarm:2375/swarm/leave?force=1"
          method: POST
          return_content: true
        when: recreate_swarm==true
      - set_fact:
          init_body: "{{ lookup( 'file', 'swarm_init.json' ) }}"
      - debug: msg="{{init_body }}"
      - name: create swarm
        uri:
          url: "http://master1.swarm:2375/swarm/init"
          method: POST
          return_content: true
          HEADER_Content_Type: "application/json"
          body: "{{init_body }}"
          body_format: json
        register: swarm_init_result
        failed_when: swarm_init_result.status >= 500
      - set_fact:
          secret: "{{swarm_init_result.json}}"
      - name: debug
        debug: msg="{{secret}}"
      tags: swarm
  environment: "{{proxy_env | default(omit)}}"
- hosts: swarmmembers
  tasks:
    - block:
      - set_fact:
          join_body: "{{ lookup( 'file', 'swarm_join.json' ) }}"
      - debug: msg="{{join_body }}"
      - name: join swarm
        uri:
          url: "http://{{inventory_hostname}}.swarm:2375/swarm/join"
          method: POST
          return_content: true
          HEADER_Content_Type: "application/json"
          body: "{{ join_body }}"
          body_format: json
        register: swarm_join_result
        failed_when: swarm_join_result.status >= 500
      - name: debug
        debug: msg="{{swarm_join_result}}"
      tags:
        - swarm
        - swarm_join
  environment: "{{proxy_env | default(omit)}}"
#- hosts: vaults
#  roles:
#    - docker-vault
#  tags:
#    - vault
